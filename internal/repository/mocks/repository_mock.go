// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/repository.go -destination=./internal/repository/mocks/repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repository "planning/internal/repository"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetTaskRepository mocks base method.
func (m *MockIRepository) GetTaskRepository() repository.ITasksRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskRepository")
	ret0, _ := ret[0].(repository.ITasksRepository)
	return ret0
}

// GetTaskRepository indicates an expected call of GetTaskRepository.
func (mr *MockIRepositoryMockRecorder) GetTaskRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskRepository", reflect.TypeOf((*MockIRepository)(nil).GetTaskRepository))
}
