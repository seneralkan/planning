// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/task.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/task.go -destination=./internal/repository/mocks/task_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "planning/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockITasksRepository is a mock of ITasksRepository interface.
type MockITasksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITasksRepositoryMockRecorder
	isgomock struct{}
}

// MockITasksRepositoryMockRecorder is the mock recorder for MockITasksRepository.
type MockITasksRepositoryMockRecorder struct {
	mock *MockITasksRepository
}

// NewMockITasksRepository creates a new mock instance.
func NewMockITasksRepository(ctrl *gomock.Controller) *MockITasksRepository {
	mock := &MockITasksRepository{ctrl: ctrl}
	mock.recorder = &MockITasksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITasksRepository) EXPECT() *MockITasksRepositoryMockRecorder {
	return m.recorder
}

// GetTasks mocks base method.
func (m *MockITasksRepository) GetTasks() ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks")
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockITasksRepositoryMockRecorder) GetTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockITasksRepository)(nil).GetTasks))
}

// StoreTask mocks base method.
func (m *MockITasksRepository) StoreTask(task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTask indicates an expected call of StoreTask.
func (mr *MockITasksRepositoryMockRecorder) StoreTask(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTask", reflect.TypeOf((*MockITasksRepository)(nil).StoreTask), task)
}
